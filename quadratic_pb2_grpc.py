# This program implements a gRPC service that solves quadratic equations.
# It consists of a server and a client. The server, implemented in quadratic_server.py, listens for incoming gRPC requests and computes the roots of a quadratic equation based on the coefficients provided by the client. It uses the quadratic formula to determine the roots and returns the result. The client, implemented in quadratic_client.py, connects to the server via a gRPC channel, sends the coefficients of the quadratic equation, and receives the solution. The client then prints the solution, which includes the roots of the equation. The project also involves generating necessary gRPC code from a .proto file that defines the service and message formats used for communication between the client and server.



# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

# Import necessary modules
import grpc
import warnings

# Import the generated classes from quadratic_pb2
import quadratic_pb2 as quadratic__pb2

# Version information for the gRPC library and the generated code
GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

# Check if the installed gRPC version is lower than the required version
try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

# If the gRPC version is not supported, issue a warning
if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in quadratic_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )

# Define the client stub for the QuadraticSolver service
class QuadraticSolverStub(object):
    """Client stub for the QuadraticSolver service.
    
    This class allows the client to call the methods defined in the QuadraticSolver service.
    """

    def __init__(self, channel):
        """Constructor for the client stub.

        Args:
            channel: A grpc.Channel. This is the communication channel to the server.
        """
        # Define the Solve method for the client stub
        # This method will be used to make a unary-unary RPC call to the server
        self.Solve = channel.unary_unary(
                '/quadratic.QuadraticSolver/Solve',  # The method being called on the server
                request_serializer=quadratic__pb2.QuadraticRequest.SerializeToString,  # Serialize the request message
                response_deserializer=quadratic__pb2.QuadraticResponse.FromString,  # Deserialize the response message
                _registered_method=True)  # Register the method

# Define the server servicer for the QuadraticSolver service
class QuadraticSolverServicer(object):
    """Server servicer for the QuadraticSolver service.
    
    This class implements the methods defined in the QuadraticSolver service.
    """

    def Solve(self, request, context):
        """Implementation of the Solve method.

        This method should be overridden to provide the actual logic for solving the quadratic equation.
        """
        # Set the status code to UNIMPLEMENTED and provide a details message
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        # Raise an exception to indicate that the method is not implemented
        raise NotImplementedError('Method not implemented!')

# Function to add the QuadraticSolver servicer to the server
def add_QuadraticSolverServicer_to_server(servicer, server):
    """Register the servicer with the gRPC server.

    Args:
        servicer: An instance of QuadraticSolverServicer.
        server: A grpc.Server.
    """
    # Define the method handlers for the servicer
    rpc_method_handlers = {
            'Solve': grpc.unary_unary_rpc_method_handler(
                    servicer.Solve,  # The method to be called on the server
                    request_deserializer=quadratic__pb2.QuadraticRequest.FromString,  # Deserialize the request message
                    response_serializer=quadratic__pb2.QuadraticResponse.SerializeToString,  # Serialize the response message
            ),
    }
    # Create a generic handler for the servicer
    generic_handler = grpc.method_handlers_generic_handler(
            'quadratic.QuadraticSolver', rpc_method_handlers)
    # Register the generic handler with the server
    server.add_generic_rpc_handlers((generic_handler,))
    # Register the method handlers with the server
    server.add_registered_method_handlers('quadratic.QuadraticSolver', rpc_method_handlers)

# Define the QuadraticSolver class for the experimental API
class QuadraticSolver(object):
    """Experimental API for the QuadraticSolver service.
    
    This class provides an alternative way to make RPC calls to the QuadraticSolver service.
    """

    @staticmethod
    def Solve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        """Static method to make a unary-unary call to the Solve method.

        Args:
            request: The request message.
            target: The target server.
            options: Additional options for the call.
            channel_credentials: Channel credentials for a secure call.
            call_credentials: Call credentials for a secure call.
            insecure: Whether to make an insecure call.
            compression: Compression settings.
            wait_for_ready: Whether to wait for the server to be ready.
            timeout: Timeout for the call.
            metadata: Metadata for the call.

        Returns:
            The response message from the server.
        """
        return grpc.experimental.unary_unary(
            request,  # The request message
            target,  # The target server
            '/quadratic.QuadraticSolver/Solve',  # The method being called on the server
            quadratic__pb2.QuadraticRequest.SerializeToString,  # Serialize the request message
            quadratic__pb2.QuadraticResponse.FromString,  # Deserialize the response message
            options,  # Additional options for the call
            channel_credentials,  # Channel credentials for a secure call
            insecure,  # Whether to make an insecure call
            call_credentials,  # Call credentials for a secure call
            compression,  # Compression settings
            wait_for_ready,  # Whether to wait for the server to be ready
            timeout,  # Timeout for the call
            metadata,  # Metadata for the call
            _registered_method=True)  # Register the method