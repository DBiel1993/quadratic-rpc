# This program implements a gRPC service that solves quadratic equations.
# It consists of a server and a client. The server, implemented in quadratic_server.py, listens for incoming gRPC requests and computes the roots of a quadratic equation based on the coefficients provided by the client. It uses the quadratic formula to determine the roots and returns the result. The client, implemented in quadratic_client.py, connects to the server via a gRPC channel, sends the coefficients of the quadratic equation, and receives the solution. The client then prints the solution, which includes the roots of the equation. The project also involves generating necessary gRPC code from a .proto file that defines the service and message formats used for communication between the client and server.



# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: quadratic.proto
# Protobuf Python Version: 5.26.1
"""Generated protocol buffer code."""

# Import necessary modules from the protobuf library
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder

# @@protoc_insertion_point(imports)

# Initialize the symbol database
_sym_db = _symbol_database.Default()

# Add the serialized descriptor for the `quadratic.proto` file
# This descriptor contains information about the messages and services defined in the .proto file
DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0fquadratic.proto\x12\tquadratic\"3\n\x10QuadraticRequest\x12\t\n\x01\x61\x18\x01 \x01(\x01\x12\t\n\x01\x62\x18\x02 \x01(\x01\x12\t\n\x01\x63\x18\x03 \x01(\x01\"%\n\x11QuadraticResponse\x12\x10\n\x08solution\x18\x01 \x01(\t2U\n\x0fQuadraticSolver\x12\x42\n\x05Solve\x12\x1b.quadratic.QuadraticRequest\x1a\x1c.quadratic.QuadraticResponseb\x06proto3')

# Create global variables to hold the descriptors for messages and services
_globals = globals()

# Build the message and enum descriptors from the serialized descriptor
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)

# Build the top-level descriptors and messages
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'quadratic_pb2', _globals)

# If not using C descriptors, set options and serialized data for the descriptors
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_QUADRATICREQUEST']._serialized_start = 30
  _globals['_QUADRATICREQUEST']._serialized_end = 81
  _globals['_QUADRATICRESPONSE']._serialized_start = 83
  _globals['_QUADRATICRESPONSE']._serialized_end = 120
  _globals['_QUADRATICSOLVER']._serialized_start = 122
  _globals['_QUADRATICSOLVER']._serialized_end = 207

# @@protoc_insertion_point(module_scope)